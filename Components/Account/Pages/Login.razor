@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Szakdolgozat.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Bejelentkezés</PageTitle>
<div class="row justify-content-center">
    <div class="col-md-4 p-4 form" style="border-radius: 20px; background-color: rgb(39 39 47)">
        <section>
            @if (errorMessage != "")
            {
                <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
            }
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Bejelentkezés</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Username" autocomplete="username" aria-required="true" class="input" placeholder="Felhasználó név"/>
                    <ValidationMessage For="() => Input.Username" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" autocomplete="current-password" class="input" aria-required="true" placeholder="Jelszó" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <MudButton Variant="Variant.Filled" Class="w-100 p-3" Style="border-radius: 1rem" ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Login" IconColor="Color.Dark" Color="Color.Secondary" Size="Size.Large">Bejelentkezés</MudButton>
                </div>
                <div class=" pt-5">
                    <MudButtonGroup Color="Color.Secondary" Variant="Variant.Text" Vertical="true">
                        <MudButton Href="Account/ForgotPassword">Elfelejtettem a jelszavam?</MudButton>
                        <MudButton Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Új felhasználó regisztrálása</MudButton>
                        <MudButton Href="Account/ResendEmailConfirmation">Igazoló email újraküldése</MudButton>
                    </MudButtonGroup>
                </div>
            </EditForm>
        </section>
    </div>
</div>

<style>
    .input {
        width: 100%;
        border: solid 1.5px #9e9e9e;
        border-radius: 1rem;
        background: none;
        padding: 1rem;
        font-size: 1rem;
        color: #f5f5f5;
        transition: border 150ms cubic-bezier(0.4,0,0.2,1);
}
</style>

@code {
    private string? errorMessage = "";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Username, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Hiba: Nem megfelelő felhasználónév vagy jelszó!";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
